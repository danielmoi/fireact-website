[{"body":"Overview AppTemplate is a template component that controls the layout of the logged-in state of your application. It has a few props for customizing the interface such as your logo and brand name, menu etc. Below is a screenshot of the component and the positions of the props.\nScreenshot Props Prop Name Description logo This is the logo component to be displayed in the top-left of the layout brand This is a brand name string to be displayed next to the logo drawerMenu This is the main menu in the left sidebar. See component for example. toolbarChildren These are the child components in the left part of the toolbar toolBarMenu This is the toolbar menu component in the right part of the toolbar. See component for example. Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/templates/AppTemplate.js\n","categories":"","description":"This is the template component for the logged-in state application.\n","excerpt":"This is the template component for the logged-in state application.\n","ref":"/docs/core-package/components/apptemplate/","tags":"","title":"AppTemplate"},{"body":"Overview AuthProvider is an invisible component to wrap the whole application and detects if the current user has signed in. It stores the user state in a context variable and passes it to the children elements.\nProps Prop Name Description firebaseConfig This is the Firebase config JSON object. brand This is a brand name string to be displayed next to the logo Context Variables The context variables AuthProvider offers to the children components.\nProp Name Description authUser The JSON object contains the user data. authUser.user contains the current user data if the user has signed in or null for users who haven’t signed in. authUser.data is a JSON for custom data object you need to store for the current user. authUser.checked indicates if the status of the current user has been checked. setAuthUser This sets the authUser context variable. fireabaseApp This is the Firebase app variable that can be reused in the children components brand This is the brand name string Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/Auth.js\n","categories":"","description":"This component checks the user’s logged-in state and passes the data to the children components via context variables.\n","excerpt":"This component checks the user’s logged-in state and passes the data to the children components via context variables.\n","ref":"/docs/core-package/components/authprovider/","tags":"","title":"AuthProvider"},{"body":"Install from NPM To install the fireactjs-core components, create your Reactjs project first, and then run npm I @fireactjs/core to install the components.\nnpx create-react-app my-app cd my-app npm i @fireactjs/core @mui/material @emotion/react @emotion/styled For details on how to create a Reactjs application, please see https://reactjs.org/docs/create-a-new-react-app.html\nSetup your Firebase project As @fireactjs/core is built on Firebase and Reactjs, you will need to have a Firebase project. Go to the Firebase website and create a project.\nCreate a web app In your Firebase Project settings → General, click the “Add app” button to create a new web app. You will the instructions on installing the firebase npm package and a JSON configuration named firebaseConfig which you will need to configure your @fireactjs application.\nCreate a file called firebaseConfig.json in the /src folder and copy the firebaseConfig JSON to the file similar to the format below.\n{ \"apiKey\": \"...\", \"authDomain\": \"...\", \"projectId\": \"...\", \"storageBucket\": \"...\", \"messagingSenderId\": \"...\", \"appId\": \"...\" } Enable authentication methods After you create your Firebase project, go to the project console and enable the authentication methods you plan to use for your web application. @fireactjs/core supports the following authentication methods:\nEmail and password Google Facebook Microsoft Twitter Github Apple Some of the authentication methods require you to register your web application in the authentication platforms (e.g. Facebook). Please make sure you complete the necessary steps to enable the authentication methods.\nCreate a file called authMethods.json in the /src folder and copy the following JSON to the file, then set the authentication methods that you enabled to true otherwise to false.\n{ \"google\": true, \"facebook\": true, \"microsoft\": true, \"apple\": true, \"twitter\": true, \"github\": true } Initialize your Firebase project Run firebase login to sign in to your Firebase account and then run firebase init to initialize your Firebase project locally.\nUpdate Firestore rules Update your firebase.rules with the code below.\nrules_version = '2'; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } match /users/{userId} { allow read, update, create: if request.auth.uid == userId; } } } Modify App.js Replace the code in your src/App.js with the code below.\nimport './App.css'; import firebaseConfig from \"./firebaseConfig.json\"; import { pathnames, AppTemplate, AuthProvider, AuthRoutes, MainMenu, PublicTemplate, ResetPassword, SignIn, SignUp, UserMenu, UserProfile, UserUpdateEmail, UserUpdateName, UserUpdatePassword, UserDelete } from '@fireactjs/core'; import { BrowserRouter, Routes } from \"react-router-dom\"; import { Route } from \"react-router-dom\"; import LocalFireDepartmentIcon from '@mui/icons-material/LocalFireDepartment'; import { CircularProgress, Box } from '@mui/material'; import authMethods from \"./authMethods.json\"; const Brand = \"FIREACT\"; const Logo = ({size, color}) =\u003e { const logoColor = color || 'warning'; return ( \u003cLocalFireDepartmentIcon color={logoColor} fontSize={size} /\u003e ); } const Loader = ({size}) =\u003e { let cpSize = \"35px\"; switch(size){ case \"small\": cpSize = \"30px\"; break; case \"medium\": cpSize = \"35px\"; break; case \"large\": cpSize = \"45px\"; break; default: cpSize = \"35px\"; break; } return ( \u003cBox sx={{ display: 'flex', justifyContent: \"center\", alignItems: \"center\"}}\u003e \u003cCircularProgress color=\"warning\" size={cpSize} /\u003e \u003cdiv style={{position: \"absolute\" }}\u003e \u003cLogo size={size} /\u003e \u003c/div\u003e \u003c/Box\u003e ); } function App() { return ( \u003cAuthProvider firebaseConfig={firebaseConfig} brand={Brand}\u003e \u003cBrowserRouter\u003e \u003cRoutes\u003e \u003cRoute element={\u003cAuthRoutes signInPath={pathnames.SignIn} loader={\u003cLoader size=\"large\" /\u003e} /\u003e} \u003e \u003cRoute element={\u003cAppTemplate logo={\u003cLogo size=\"large\" /\u003e} brand={Brand} toolBarMenu={\u003cUserMenu pathnames={pathnames} /\u003e} drawerMenu={\u003cMainMenu pathnames={pathnames} /\u003e} /\u003e}\u003e \u003cRoute exact path=\"/\" element={\u003c\u003e\u003c/\u003e} /\u003e \u003cRoute exact path={pathnames.UserProfile} element={\u003cUserProfile pathnames={pathnames} /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateEmail} element={\u003cUserUpdateEmail pathnames={pathnames} /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateName} element={\u003cUserUpdateName pathnames={pathnames} /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdatePassword} element={\u003cUserUpdatePassword pathnames={pathnames} /\u003e} /\u003e \u003cRoute exact path={pathnames.UserDelete} element={\u003cUserDelete pathnames={pathnames} /\u003e} /\u003e \u003c/Route\u003e \u003c/Route\u003e \u003cRoute element={\u003cPublicTemplate /\u003e}\u003e \u003cRoute path={pathnames.SignIn} element={ \u003cSignIn logo={\u003cLogo size=\"large\" /\u003e} pathnames={pathnames} providers={authMethods} /\u003e } /\u003e \u003cRoute path={pathnames.SignUp} element={ \u003cSignUp logo={\u003cLogo size=\"large\" /\u003e} pathnames={pathnames} /\u003e } /\u003e \u003cRoute path={pathnames.ResetPassword} element={ \u003cResetPassword logo={\u003cLogo size=\"large\" /\u003e} pathnames={pathnames} /\u003e } /\u003e \u003c/Route\u003e \u003c/Routes\u003e \u003c/BrowserRouter\u003e \u003c/AuthProvider\u003e ) } export default App; Replace Brand and Logo to customise the logo and the brand of your web application.\nFor further customisation, please read the documentation.\nRun your app locally By now, your app is ready for the first run locally. Use the command npm start to start the app.\nDeploy to Firebase After testing locally, your app is ready to be deployed to Firebase hosting.\nBuild Run npm run build to build your app\nDeploy Run firebase init to initialize your project with Firebase and then run firebase deploy to deploy your app to Firebase. If you see a blank screen in your production URL, make sure you set the build as the folder in your Firebase settings.\n","categories":"","description":"Instructions for installing Fireactjs and creating your Reactjs application with the Fireactjs framework.\n","excerpt":"Instructions for installing Fireactjs and creating your Reactjs application with the Fireactjs framework.\n","ref":"/docs/core-package/installation/","tags":"","title":"Installation"},{"body":"What is Fireactjs Fireactjs is an open-source framework for building SaaS and user portals with Firebase and Reactjs. The framework is designed to be component-based, so it can be extensible and customizable by adding or replacing custom-built components.\nWhy Fireactjs Open source Fireactjs is an open-source project for developers to use for free without worries, and join the community to learn together. Extensible and customizable Fireactjs is designed as component-based so that you can easily extend and customize the features with your own components. Accelerate development Fireactjs is very simple to setup to help you accelerate your development by skipping the development work of fundamental functionalities such as user authentication. Major Features The major features of Fireactjs include:\nSupport email and password sign-in Support single-sign-on including Google, Facebook, Microsoft, Github, Twitter and Apple Key user profile functionalities including updating email, password, etc Integration with Firebase Extensible and customizable framework architecture ","categories":"","description":"Fireactjs is a fully customizable open-source framework for building SaaS and user portals with Firebase and Reactjs.\n","excerpt":"Fireactjs is a fully customizable open-source framework for building SaaS and user portals with Firebase and Reactjs.\n","ref":"/docs/overview/","tags":"","title":"Overview"},{"body":" Packages\nHere is a list of the Fireactjs project npm packages\nEnjoy building!\n@fireactjs/core Fireactjs is an open-source framework for building SaaS and user portals with Firebase and Reactjs. The framework is designed to be component-based, so it can be extensible and customizable by adding or replacing custom-built components.\nnpm package | Github | Documentation ","categories":"","description":"","excerpt":" Packages\nHere is a list of the Fireactjs project npm packages\nEnjoy building!\n@fireactjs/core Fireactjs is an open-source framework for building SaaS and user portals with Firebase and Reactjs. The …","ref":"/packages/","tags":"","title":"Fireactjs Packages"},{"body":"Overview AuthRoutes is the component to check the current user sign-in state. If the user’s authUser.checked is false, it will show a loading screen with the \u003cLoader /\u003e component. Once the user’s sign-in state is checked, which means authUser.checked is true, it will either redirect the user to the sign-in page when the user hasn’t signed in or show the nested React routes.\nProps Prop Name Description signInPath The pathname of the sign-in page loader This is the loader component to be displayed when the application is loading user sign-in state data Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/Auth.js\n","categories":"","description":"The route component checks user sign-in state and redirect users to the sign-in page if they haven’t signed in.\n","excerpt":"The route component checks user sign-in state and redirect users to the sign-in page if they haven’t signed in.\n","ref":"/docs/core-package/components/authroutes/","tags":"","title":"AuthRoutes"},{"body":"","categories":"","description":"The components are building blocks of the Fireactjs framework.\n","excerpt":"The components are building blocks of the Fireactjs framework.\n","ref":"/docs/core-package/components/","tags":"","title":"Components"},{"body":"","categories":"","description":"Documentation and usage guides on how to develop web applications with Fireactjs.\n","excerpt":"Documentation and usage guides on how to develop web applications with Fireactjs.\n","ref":"/docs/","tags":"","title":"Fireactjs Documentation"},{"body":"Fireactjs is built with Firebase, Reactjs and Material UI. This guide is written to outline what concepts and technology the documentation assumes that you have knowledge of, and the depth of that knowledge, as well as provide resources to help fill those knowledge gaps.\nReactjs Development knowledge of Reactjs is required to be able to customize or extend the framework for your project. If you are not familiar with Reactjs, we recommend you have knowledge in the following areas before getting started with Fireacjs:\nReactjs components Context variables React Router DOM v6 Firebase Firebase knowledge is nice to have because Fireactjs is built to be hosted on Firebase. If you are not familiar with Firebase, we recommend you to learn about the following areas:\nFirebase tools CLI Firebase authentication Firestore Firebase hosting Material UI Material UI knowledge is nice to have if you want to develop your own components to customize or extend the framework for your project. However, you could use other UI libraries if you like.\n","categories":"","description":"Foundational knowledge you should know before starting working with Fireactjs.\n","excerpt":"Foundational knowledge you should know before starting working with Fireactjs.\n","ref":"/docs/prerequisite-knowledge/","tags":"","title":"Prerequisite Knowledge"},{"body":"Overview MainMenu is the component to display the menu in the left sidebar of the application layout. By default, it contains two menu items: Application Home and User Profile. You can extend the menu by replacing the component with your own component.\nScreenshot Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/menus/MainMenu.js\n","categories":"","description":"The main menu component for the application layout.\n","excerpt":"The main menu component for the application layout.\n","ref":"/docs/core-package/components/mainmenu/","tags":"","title":"MainMenu"},{"body":"To add features to your application based on Fireactjs, you will need to develop your Reactjs components and attach them to the application routes.\nReplacing an existing route feature When you setup your application based on Fireactjs, the homepage of the application is blank. That is because the element of the homepage / route is simply a React fragment as in the example code below.\n\u003cRoute exact path=\"/\" element={\u003c\u003e\u003c/\u003e} /\u003e If you replace the React fragment with your own component, you can control the functionality of the homepage.\nAdding new routes The features of your web application may need more than the homepage route. You can add more routes similar to the homepage route to extend the application.\nIt is important that you add your new routes to the pathnames.json file instead of hard coding them in the App.js so that your users can navigate between the components without broken links when some routes are updated.\nIf you need to add the new routes to the main menu or the user menu, please read the components’ documents.\nUsing authUser context variable In your components, you can use the authUser context variable to retrieve user data and store user data. The current user’s information is under authUser.user JSON. Here is a list of the key properties of the current user.\nName - authUser.user.displayName Email - authUser.user.email User ID - authUser.user.uid Email verified - authUser.user.emailVerified Avatar - authUser.user.photoURL Below is an example to display the user info in a component called MyComponent\nimport React from \"react\"; import { AuthContext } from \"@fireactjs/core\"; export const MyComponent = () =\u003e { return ( \u003cAuthContext.Consumer\u003e {context =\u003e ( \u003cdiv\u003e \u003cp\u003eUser ID: {context.authUser.user.uid}\u003c/p\u003e \u003cp\u003eName: {context.authUser.user.displayName}\u003c/p\u003e \u003cp\u003eEmail: {context.authUser.user.email}\u003c/p\u003e \u003cp\u003eVerified: {context.authUser.user.emailVerified?\"Yes\":\"No\"}\u003c/p\u003e \u003cp\u003eAvatar URL: {context.authUser.user.photoURL}\u003c/p\u003e \u003c/div\u003e )} \u003c/AuthContext.Consumer\u003e ) } Replace the React fragment of the homepage route as in the example below, and you will be able to show the current user info on the homepage.\n\u003cRoute exact path=\"/\" element={\u003cMyComponent /\u003e} /\u003e Storing data to the authUser context variable In your application, you can store data for the current user in the authUser context variable. The [authUser.data](http://authUser.data) is designed for the purpose.\nconst {setAuthUser} = useContext(AuthContext); setAuthUser(prevState =\u003e ({ ...prevState, data: { prop1: 'test' } })); ","categories":"","description":"Develop your components to add features to your Fireactjs application.\n","excerpt":"Develop your components to add features to your Fireactjs application.\n","ref":"/docs/core-package/development/","tags":"","title":"Development"},{"body":"Overview PublicTemplate is a layout component to control the look and feel of the public pages for the sign-in and sign-up processes. It displays the content in the centre of the page layout.\nSource Code https://github.com/fireactjs/core/blob/main/src/lib/components/templates/PublicTemplate.js\n","categories":"","description":"The template layout for the public pages including Sign-In, Sign-Up etc.\n","excerpt":"The template layout for the public pages including Sign-In, Sign-Up etc.\n","ref":"/docs/core-package/components/publictemplate/","tags":"","title":"PublicTemplate"},{"body":"Overview ResetPassword is a form component for users to input their emails to request a password reset. The form will trigger the reset password process in Firebase Authentication. There is a rate limit enforced by Firebase so that it won’t be used to spam users.\nScreenshot Props Prop Name Description logo This is the logo component to be displayed at the top of the form pathnames The JSON contains the components and their path names for navigation links Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/auth/ResetPassword.js\n","categories":"","description":"The form for users to request a password reset.\n","excerpt":"The form for users to request a password reset.\n","ref":"/docs/core-package/components/resetpassword/","tags":"","title":"ResetPassword"},{"body":"Overview Fireactjs is a component-based framework. That means all the out-of-the-box features are delivered as components, and you can add components to extend or swap components to customize the web application that you are building based on the framework.\nYou can find all the key components that are shipped with the framework in the example src/App.js file in the demo repo here:\nfunction App() { return ( \u003cAuthProvider firebaseConfig={firebaseConfig} brand={Brand}\u003e \u003cBrowserRouter\u003e \u003cRoutes\u003e \u003cRoute element={\u003cAuthRoutes signInPath={pathnames.SignIn} loader={\u003cLoader size=\"large\" /\u003e} /\u003e} \u003e \u003cRoute element={\u003cAppTemplate logo={\u003cLogo size=\"large\" /\u003e} brand={Brand} toolBarMenu={\u003cUserMenu pathnames={pathnames} /\u003e} drawerMenu={\u003cMainMenu pathnames={pathnames} /\u003e} /\u003e}\u003e \u003cRoute exact path=\"/\" element={\u003c\u003e\u003c/\u003e} /\u003e \u003cRoute exact path={pathnames.UserProfile} element={\u003cUserProfile pathnames={pathnames} /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateEmail} element={\u003cUserUpdateEmail pathnames={pathnames} /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateName} element={\u003cUserUpdateName pathnames={pathnames} /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdatePassword} element={\u003cUserUpdatePassword pathnames={pathnames} /\u003e} /\u003e \u003cRoute exact path={pathnames.UserDelete} element={\u003cUserDelete pathnames={pathnames} /\u003e} /\u003e \u003c/Route\u003e \u003c/Route\u003e \u003cRoute element={\u003cPublicTemplate /\u003e}\u003e \u003cRoute path={pathnames.SignIn} element={ \u003cSignIn logo={\u003cLogo size=\"large\" /\u003e} pathnames={pathnames} providers={authMethods} /\u003e } /\u003e \u003cRoute path={pathnames.SignUp} element={ \u003cSignUp logo={\u003cLogo size=\"large\" /\u003e} pathnames={pathnames} /\u003e } /\u003e \u003cRoute path={pathnames.ResetPassword} element={ \u003cResetPassword logo={\u003cLogo size=\"large\" /\u003e} pathnames={pathnames} /\u003e } /\u003e \u003c/Route\u003e \u003c/Routes\u003e \u003c/BrowserRouter\u003e \u003c/AuthProvider\u003e ) } Authentication Components At the top level, the \u003cAuthProvider /\u003e component manages the authentication state with a context variable called authUser. This variable tells the system if the current user has signed in or not as well as the relevant data about the user.\nRoutes Within the \u003cAuthProvider /\u003e component are routes for your application. It is important to have a good understanding of React Router. There are two kinds of routes you will find: the layout routes without the path prop and the page routes with the path prop.\nAll the pages that only authenticated users can access should be placed under the route of the \u003cAuthRoutes /\u003e component. And within the component, you can have template routes to control the look and feel of your application. The \u003cAppTemplate /\u003e component is an example.\nOutside of the \u003cAuthRoutes /\u003e component are the pages that the users can access without authentication, such as the sign-in page, the sign-up page, etc. They can have their own templates similar to the authenticated pages. The \u003cPublicTemplate /\u003e component is an example.\nPage components Each route mapping to a page requires a visual component for its element prop. For example, the \u003cUserProfle /\u003e component shows the user profile details. You can add new routes for new pages and features of your application, or swap the existing routes with your custom-built components to change their functionality.\nPathnames Within the page components, there are links between the pages to build a smooth user flow experience. It’s important that the page components know how to link with each other, and that is the purpose of the pathnames.json file. This file defines all the page components and their URL path names as a JSON file.\nHere is an example of the default pathnames.json file from the framework.\n{ \"ResetPassword\": \"/reset-password\", \"SignIn\": \"/sign-in\", \"SignUp\": \"/sign-up\", \"UserDelete\": \"/user/delete\", \"UserProfile\": \"/user\", \"UserUpdateEmail\": \"/user/update-email\", \"UserUpdateName\": \"/user/update-name\", \"UserUpdatePassword\": \"/user/update-password\" } ","categories":"","description":"Fireactjs is designed to be extensible and customizable with its framework architecture.\n","excerpt":"Fireactjs is designed to be extensible and customizable with its framework architecture.\n","ref":"/docs/framework-architecture/","tags":"","title":"Framework Architecture"},{"body":"","categories":"","description":"","excerpt":"","ref":"/showcases/","tags":"","title":"Fireactjs Showcases"},{"body":"Overview SignIn is a form component for users to sign in to the application via email and password or one of the enabled single sign-on methods. It shows the single sign-on buttons based on the provider JSON. Once the user signs in successfully, it will redirect the user to the successUrl or the URL pathname in the re parameter.\nScreenshot Props Prop Name Description logo This is the logo component to be displayed at the top of the form pathnames The JSON contains the components and their path names for navigation links providers The JSON to control which single sign-on methods are available successUrl The URL to redirect users to after signing in, if no re parameter is provided in the URL Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/auth/SignIn.js\n","categories":"","description":"The form for users to sign in to the application.\n","excerpt":"The form for users to sign in to the application.\n","ref":"/docs/core-package/components/signin/","tags":"","title":"SignIn"},{"body":"Overview SignUp is the form component for users to sign up for new accounts with email and password. It requires email, full name and password to sign up.\nScreenshot Props Prop Name Description logo This is the logo component to be displayed at the top of the form pathnames The JSON contains the components and their path names for navigation links successUrl The URL to redirect users to after signing up. If no successUrl is provided, the sign up process will redirect users back to the homepage after signing up. Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/auth/SignUp.js\n","categories":"","description":"The form for users to sign up using email and password.\n","excerpt":"The form for users to sign up using email and password.\n","ref":"/docs/core-package/components/signup/","tags":"","title":"SignUp"},{"body":"","categories":"","description":"@fireactjs/core is the core package of the Fireactjs framework.\n","excerpt":"@fireactjs/core is the core package of the Fireactjs framework.\n","ref":"/docs/core-package/","tags":"","title":"@fireactjs/core Package"},{"body":" Join the Fireactjs community\nFireactjs is an open-source project that everyone in the community can use, learn from and contribute to. We would love you to join us. Here are a few ways to join the community.\nDiscussions Provide feedback to the community. Ask questions and answer questions from other community members.\nRead more …\nShowcase We love to see your cool work based on Fireactjs. Submit your web application that is built based on Fireactjs.\nRead more …\nGithub Report issues or contribute code to improve the project. Visit the Github repo of the project.\nRead more …\nContributors Chaoming Li ","categories":"","description":"","excerpt":" Join the Fireactjs community\nFireactjs is an open-source project that everyone in the community can use, learn from and contribute to. We would love you to join us. Here are a few ways to join the …","ref":"/community/","tags":"","title":"Fireactjs Community"},{"body":"Overview UserDelete is a form component for the current user to delete their account. It is linked from the UserProfile component. After the account is successfully deleted, the user will no longer be in the signed-in state and will be redirected back to the homepage.\nScreenshot Props Prop Name Description pathnames The JSON contains the components and their path names for navigation links Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserDelete.js\n","categories":"","description":"The form component for deleting the current user account.\n","excerpt":"The form component for deleting the current user account.\n","ref":"/docs/core-package/components/userdelete/","tags":"","title":"UserDelete"},{"body":"Overview UserMenu is the menu at the top-right of the toolbar for the current user to manage their profile and sign out. It can be customized by inserting additional menu items as customItems prop. You can also replace it with your own menu component.\nScreenshot Props Prop Name Description pathnames The JSON contains the components and their path names for navigation links customItems An array of menu item elements to be inserted between Profile and Sign Out options. Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/menus/UserMenu.js\n","categories":"","description":"The menu component displays the user action menu at the top-right of the toolbar.\n","excerpt":"The menu component displays the user action menu at the top-right of the toolbar.\n","ref":"/docs/core-package/components/usermenu/","tags":"","title":"UserMenu"},{"body":"Overview UserProfile is a component to display the user profile information such as avatar, email and name, and to link to the profile management features for updating email, name and password. It also shows if the email is verified. When the user’s email is unverified, the user can click on the item to trigger a verification email.\nScreenshot Props Prop Name Description pathnames The JSON contains the components and their path names for navigation links Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserProfile.js\n","categories":"","description":"The component displays the profile of the current user and links to user profile management features.\n","excerpt":"The component displays the profile of the current user and links to user profile management features.\n","ref":"/docs/core-package/components/userprofile/","tags":"","title":"UserProfile"},{"body":"Overview UserUpdateEmail is a form component for the current user to update their email address. It is linked from the UserProfile component.\nScreenshot Props Prop Name Description pathnames The JSON contains the components and their path names for navigation links Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserUpdateEmail.js\n","categories":"","description":"The form component for updating email addresses.\n","excerpt":"The form component for updating email addresses.\n","ref":"/docs/core-package/components/userupdateemail/","tags":"","title":"UserUpdateEmail"},{"body":"Overview UserUpdateName is a form component for the current user to update their full name. It is linked from the UserProfile component.\nScreenshot Props Prop Name Description pathnames The JSON contains the components and their path names for navigation links Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserUpdateName.js\n","categories":"","description":"The form component for updating names.\n","excerpt":"The form component for updating names.\n","ref":"/docs/core-package/components/userupdatename/","tags":"","title":"UserUpdateName"},{"body":"Overview UserUpdatePassword is a form component for the current user to update their password. It is linked from the UserProfile component.\nScreenshot Props Prop Name Description pathnames The JSON contains the components and their path names for navigation links Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserUpdatePassword.js\n","categories":"","description":"The form component for updating passwords.\n","excerpt":"The form component for updating passwords.\n","ref":"/docs/core-package/components/userupdatepassword/","tags":"","title":"UserUpdatePassword"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":" Fireactjs Fireactjs = Firebase + Reactjs\nThe fully customizable open-source framework for building SaaS and user portals with Firebase and Reactjs\nGet Started Live Demo What is Fireactjs?\nFireactjs is an open-source framework for building SaaS and user portals with Firebase and Reactjs. The framework is designed to be component-based, so it can be extensible and customizable by adding or replacing custom-built components.\nOpen source Fireactjs is an open-source project for developers to use for free without worries, and join the community to learn together.\nExtensible and customizable Fireactjs is designed as component-based so that you can easily extend and customize the features with your own components.\nAccelerate development Fireactjs is very simple to setup to help you accelerate your development by skipping the development work of fundamental functionalities such as user authentication.\n","categories":"","description":"","excerpt":" Fireactjs Fireactjs = Firebase + Reactjs\nThe fully customizable open-source framework for building SaaS and user portals with Firebase and Reactjs\nGet Started Live Demo What is Fireactjs?\nFireactjs …","ref":"/","tags":"","title":"Fireactjs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]